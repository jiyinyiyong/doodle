// Generated by CoffeeScript 1.6.2
var WebSocketServer, app, center, chokidar, client, events, filename, fs, http, log, options, path, print_help, watch_files, wss, _ref,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

fs = require('fs');

http = require('http');

path = require('path');

chokidar = require("chokidar");

events = require("events");

log = function() {};

center = new events.EventEmitter;

print_help = function() {
  console.log("\nDoodle: watch JS files and reload pages via websocket\n\ndoodle dir path dir-2 path-2\n# watchs directories and files\n\ndoodle log:yes dir\n# open log\n\ndoodle port:7777 dir\n# set the port serving doodle.js\n\ndoodle ws:7776 dir\n# set the port websocket listens\n\ndoodle -h\ndoodle --help\ndoodle help:\n# print help\n");
  return process.exit();
};

watch_files = [];

options = {};

if (__indexOf.call(process.argv, "-h") >= 0) {
  print_help();
}

if (__indexOf.call(process.argv, "--help") >= 0) {
  print_help();
}

if (__indexOf.call(process.argv, "help:") >= 0) {
  print_help();
}

if (watch_files.length === 0) {
  print_help();
}

process.argv.slice(2).forEach(function(string) {
  var key, value, _ref;

  if (string.match(/\S:\S/)) {
    _ref = string.split(":"), key = _ref[0], value = _ref[1];
    return options[key] = value;
  } else {
    return watch_files.push(string);
  }
});

if ((_ref = options.log) === "true" || _ref === "yes" || _ref === "on") {
  log = console.log;
}

if (options.ws != null) {
  options.ws = Number(options.ws);
}

if (options.port != null) {
  options.port = Number(options.port);
}

if ((options.port != null) && (options.ws == null)) {
  options.ws = options.port - 1;
}

log("options:", options);

log("watching:", watch_files);

WebSocketServer = require('ws').Server;

wss = new WebSocketServer({
  port: options.ws || 7776,
  host: '0.0.0.0'
});

wss.on('connection', function(ws) {
  var notify;

  notify = function() {
    try {
      return ws.send("reload");
    } catch (_error) {}
  };
  center.on("update", notify);
  return ws.on('close', function() {
    return center.removeListener("update", notify);
  });
});

filename = path.join(__dirname, "doodle.js");

client = fs.readFileSync(filename, "utf8");

if (options.ws != null) {
  client = client.replace(/7776/, options.ws);
}

app = http.createServer(function(req, res) {
  res.writeHead(200, {
    'Content-Type': 'text/javascript'
  });
  return res.end(client);
});

app.listen(options.port || 7777);

watch_files.forEach(function(file) {
  var watcher;

  watcher = chokidar.watch(file);
  return watcher.on("change", function(path) {
    center.emit("update");
    return log("Update from:", path);
  });
});
